{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f7cb0dd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn import preprocessing\n",
    "from collections import defaultdict, Counter\n",
    "from nltk.util import ngrams\n",
    "import collections\n",
    "import nltk\n",
    "import warnings\n",
    "import xgboost as xgb\n",
    "from sklearn.utils import class_weight\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import  precision_score, recall_score\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da0b4a79",
   "metadata": {},
   "outputs": [],
   "source": [
    "wp_thresholds = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 0.99]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "77d642f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0033333333333333335"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "FILTHER_THRESHOLD = 1.0/300\n",
    "FILTHER_THRESHOLD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b8dc6f3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_parquet('home_assignment_data.parquet')\n",
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "877502eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9991"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[df['days_since_install'].notnull()]\n",
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d3dfad7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>is_subscriber</th>\n",
       "      <th>country</th>\n",
       "      <th>language</th>\n",
       "      <th>days_since_install</th>\n",
       "      <th>followers_count</th>\n",
       "      <th>has_facebook</th>\n",
       "      <th>has_youtube</th>\n",
       "      <th>has_instagram</th>\n",
       "      <th>has_tiktok</th>\n",
       "      <th>has_snapchat</th>\n",
       "      <th>...</th>\n",
       "      <th>feature_types</th>\n",
       "      <th>start_times</th>\n",
       "      <th>feature_durations</th>\n",
       "      <th>replaceable_count</th>\n",
       "      <th>transitions_count</th>\n",
       "      <th>audio_embedding</th>\n",
       "      <th>visual_embedding</th>\n",
       "      <th>post_timestamp</th>\n",
       "      <th>impressions</th>\n",
       "      <th>clicks</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5136</th>\n",
       "      <td>False</td>\n",
       "      <td>HU</td>\n",
       "      <td>en-HU</td>\n",
       "      <td>128.0</td>\n",
       "      <td>12</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>[Text, Clip]</td>\n",
       "      <td>[1.477, 0.0]</td>\n",
       "      <td>[0.4923333333333333, 21.1]</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>[-0.8035852313041687, 0.4065600037574768, -0.9...</td>\n",
       "      <td>[-0.327392578125, -0.1810302734375, 0.46435546...</td>\n",
       "      <td>2022-10-02 14:12:46.667000+00:00</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2885</th>\n",
       "      <td>True</td>\n",
       "      <td>US</td>\n",
       "      <td>en-US</td>\n",
       "      <td>772.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>[Mixer, Text, Text, Text, Text, Text, Clip, Cl...</td>\n",
       "      <td>[1.3141, 0.68205, 1.8426, 13.384683333333333, ...</td>\n",
       "      <td>[1.50735, 1.1319833333333333, 1.20906666666666...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[-0.6472129821777344, -0.5502700209617615, -0....</td>\n",
       "      <td>[0.3112284243106842, -0.1690673828125, -0.0603...</td>\n",
       "      <td>2022-09-29 00:46:44.510000+00:00</td>\n",
       "      <td>104</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      is_subscriber country language  days_since_install  followers_count  \\\n",
       "5136          False      HU    en-HU               128.0               12   \n",
       "2885           True      US    en-US               772.0                0   \n",
       "\n",
       "      has_facebook  has_youtube  has_instagram  has_tiktok  has_snapchat  ...  \\\n",
       "5136         False        False          False       False         False  ...   \n",
       "2885         False        False          False       False         False  ...   \n",
       "\n",
       "                                          feature_types  \\\n",
       "5136                                       [Text, Clip]   \n",
       "2885  [Mixer, Text, Text, Text, Text, Text, Clip, Cl...   \n",
       "\n",
       "                                            start_times  \\\n",
       "5136                                       [1.477, 0.0]   \n",
       "2885  [1.3141, 0.68205, 1.8426, 13.384683333333333, ...   \n",
       "\n",
       "                                      feature_durations  replaceable_count  \\\n",
       "5136                         [0.4923333333333333, 21.1]                  1   \n",
       "2885  [1.50735, 1.1319833333333333, 1.20906666666666...                  0   \n",
       "\n",
       "     transitions_count                                    audio_embedding  \\\n",
       "5136                 0  [-0.8035852313041687, 0.4065600037574768, -0.9...   \n",
       "2885                 0  [-0.6472129821777344, -0.5502700209617615, -0....   \n",
       "\n",
       "                                       visual_embedding  \\\n",
       "5136  [-0.327392578125, -0.1810302734375, 0.46435546...   \n",
       "2885  [0.3112284243106842, -0.1690673828125, -0.0603...   \n",
       "\n",
       "                       post_timestamp  impressions clicks  \n",
       "5136 2022-10-02 14:12:46.667000+00:00          116      0  \n",
       "2885 2022-09-29 00:46:44.510000+00:00          104      0  \n",
       "\n",
       "[2 rows x 24 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c7924cc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['convergance'] = 100 * (df['clicks'] / df['impressions'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1f0da959",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['feature_types'] = df['feature_types'].apply(lambda features: [feature.strip().lower() for feature in features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "17587a7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df['unique_feature_types'] = df['feature_types'].apply(lambda features: list(set(features)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "daa5d7fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['language_clean'] = df['language'].apply(lambda language: language.split('-')[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d65262d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['number_of_feature_types'] = df['feature_types'].apply(len)\n",
    "df['number_of_unique_feature_types'] = df['unique_feature_types'].apply(len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8dcb0ea7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7992, 1999)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df, test_df = train_test_split(df, test_size = 0.2)\n",
    "\n",
    "len(train_df), len(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a0c9f69c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'FEATURE_UNK'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "UNK_FEATURTE = 'FEATURE_UNK'\n",
    "FEATURE_MIN_TEMPLATES = 5\n",
    "UNK_FEATURTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "772606fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_unique_features = {feature for features in train_df['unique_feature_types'].tolist() for feature in features}\n",
    "len(all_unique_features) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dcc6b0e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_types_counter = Counter([feature for features in train_df['unique_feature_types'].tolist() for feature in features])\n",
    "valid_features = {feature for (feature, count) in  feature_types_counter.items() if count > FEATURE_MIN_TEMPLATES}\n",
    "valid_features.add(UNK_FEATURTE)\n",
    "len(valid_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "769962df",
   "metadata": {},
   "outputs": [],
   "source": [
    "features_lists = train_df['feature_types'].tolist()\n",
    "features_lists = [['start']  + f + ['end'] for f in features_lists]\n",
    "\n",
    "feature_counts = Counter()\n",
    "\n",
    "for features in features_lists:\n",
    "    feature_counts.update(nltk.ngrams(features, 1))\n",
    "    feature_counts.update(nltk.ngrams(features, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "48f11632",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13, 45)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "language_count = df.groupby(['language_clean']).size().to_frame('size').reset_index()\n",
    "valid_languages = set(language_count[language_count['size'] > 50]['language_clean'])\n",
    "UNK_LANGUAGE = 'UNK_LANGUAGE'\n",
    "len(valid_languages), len(pd.unique(df['language_clean']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "519298c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28, 145)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_count = df.groupby(['country']).size().to_frame('size').reset_index()\n",
    "valid_countries = set(country_count[country_count['size'] > 50]['country'])\n",
    "UNK_COUNTRY = 'UNK_COUNTRY'\n",
    "len(valid_countries), len(pd.unique(df['country']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1544e832",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df['country'] = train_df['country'].apply(lambda country: country if country in valid_countries else UNK_COUNTRY)\n",
    "train_df['language_clean'] = train_df['language_clean'].apply(lambda language_clean: language_clean if language_clean in valid_languages else UNK_LANGUAGE)\n",
    "\n",
    "test_df['country'] = test_df['country'].apply(lambda country: country if country in valid_countries else UNK_COUNTRY)\n",
    "test_df['language_clean'] = test_df['language_clean'].apply(lambda language_clean: language_clean if language_clean in valid_languages else UNK_LANGUAGE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2979f287",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array(['en', 'de', 'ru', 'pt', 'es', 'uk', 'UNK_LANGUAGE', 'ar', 'it',\n",
       "        'fr', 'pl', 'tr', 'sv', 'nl'], dtype=object),\n",
       " array(['US', 'UNK_COUNTRY', 'TR', 'BR', 'GB', 'KZ', 'UA', 'ES', 'CA',\n",
       "        'JP', 'BY', 'IN', 'RU', 'MX', 'SA', 'IT', 'CH', 'EG', 'KW', 'DE',\n",
       "        'FR', 'PL', 'NL', 'AE', 'IQ', 'AU', 'SE', 'IL', 'CO'], dtype=object))"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_encoder = preprocessing.LabelEncoder()\n",
    "language_clean_encoder = preprocessing.LabelEncoder()\n",
    "country_encoder.fit(train_df['country'])\n",
    "language_clean_encoder.fit(train_df['language_clean'])\n",
    "pd.unique(train_df['language_clean']), pd.unique(train_df['country'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "51e0bb41",
   "metadata": {},
   "outputs": [],
   "source": [
    "def count_feature(feature_types):\n",
    "    feature_to_count = defaultdict(lambda: 0.)\n",
    "    \n",
    "    for feature in feature_types:\n",
    "        feature_to_count[feature] += 1\n",
    "    return feature_to_count\n",
    "\n",
    "def get_feature_duration(feature_types, features_duration):\n",
    "    feature_to_duration = defaultdict(lambda: 0.)\n",
    "    \n",
    "    for (feature, duration) in zip(feature_types, features_duration):\n",
    "        feature_to_duration[feature] += duration\n",
    "    return feature_to_duration\n",
    "\n",
    "def get_feature_min_start_time(feature_types, features_start_times):\n",
    "    feature_to_min_start_time = defaultdict(lambda: -1)\n",
    "    \n",
    "    for (feature, start_time) in zip(feature_types, features_start_times):\n",
    "        \n",
    "        if feature in feature_to_min_start_time:\n",
    "            continue \n",
    "            \n",
    "        feature_to_min_start_time[feature] = start_time\n",
    "        \n",
    "    return feature_to_min_start_time\n",
    "\n",
    "\n",
    "def get_feature_min_max_median_duration(durations, features, target_feature):\n",
    "    durations = [duration for (feature, duration) in  zip(features ,durations) if feature == target_feature] \n",
    "    \n",
    "    if len(durations) == 0:\n",
    "        return pd.Series([-1, -1, -1])\n",
    "    \n",
    "    \n",
    "    return pd.Series([np.min(durations), np.max(durations), np.median(durations)])\n",
    "    \n",
    "\n",
    "\n",
    "def create_grams_features(dataset):\n",
    "    \n",
    "    features_lists = dataset['feature_types'].tolist()\n",
    "    features_lists = [['start']  + f + ['end'] for f in features_lists]\n",
    "    \n",
    "    vals = []\n",
    "    max_vals = []\n",
    "    min_vals = []\n",
    "    mean_probs = []\n",
    "    median_probs = []\n",
    "\n",
    "    \n",
    "    for l in features_lists:\n",
    "        p1 = []\n",
    "        for i in range(len(l) -1):\n",
    "            s = l[i]\n",
    "            e = l[i + 1]\n",
    "\n",
    "            x1 = feature_counts[tuple([s, e])]\n",
    "            x2 = feature_counts[tuple([s])]\n",
    "\n",
    "            p2 =  x1/x2 if x2 > 0 else 0.\n",
    "            p1.append(p2)\n",
    "        \n",
    "        x = np.prod(p1)\n",
    "        vals.append(x)\n",
    "        max_vals.append(np.max(p1))\n",
    "        min_vals.append(np.min(p1))\n",
    "        mean_probs.append(np.mean(p1))\n",
    "        median_probs.append(np.median(p1))\n",
    "\n",
    "        \n",
    "    dataset['features_prob'] = vals\n",
    "    dataset['min_prob'] = min_vals\n",
    "    dataset['max_prob'] = max_vals\n",
    "    dataset['mean_probs'] = mean_probs\n",
    "    dataset['median_probs'] = median_probs\n",
    "    \n",
    "    return dataset\n",
    "\n",
    "def get_label(convergence):\n",
    "    \n",
    "    if convergence < FILTHER_THRESHOLD:\n",
    "        return 0 \n",
    "    \n",
    "    return 1\n",
    "\n",
    "\n",
    "def tfidf_scores(features):\n",
    "    \n",
    "    tfidfs = defaultdict(lambda: -1)\n",
    "    \n",
    "    feature_to_count = count_feature(features)\n",
    "    for feature in features:\n",
    "        count = feature_to_count[feature]\n",
    "        tf = count/len(features)\n",
    "        \n",
    "        numbwr_of_documents_with_feature = feature_to_number_of_documents[feature] if feature_to_number_of_documents[feature] > 0 else 0.\n",
    "        \n",
    "        idf = np.log(len(train_df)/numbwr_of_documents_with_feature) if numbwr_of_documents_with_feature > 0 else 0.\n",
    "        \n",
    "        tfidfs[feature] = tf * idf\n",
    "    \n",
    "    return tfidfs\n",
    "        \n",
    "def tfidf_duration_scores(features, features_duration, duration):\n",
    "    \n",
    "    tfidfs = defaultdict(lambda: -1)\n",
    "    feature_to_count = get_feature_duration(features, features_duration)\n",
    "    \n",
    "    for feature in features:\n",
    "        count = feature_to_count[feature]\n",
    "        tf = count/duration\n",
    "        \n",
    "        numbwr_of_documents_with_feature = feature_to_number_of_documents[feature] if feature_to_number_of_documents[feature] > 0 else 0.\n",
    "        \n",
    "        idf = np.log(len(train_df)/numbwr_of_documents_with_feature) if numbwr_of_documents_with_feature > 0 else 0.\n",
    "        \n",
    "        tfidfs[feature] = tf * idf\n",
    "    \n",
    "    return tfidfs\n",
    "\n",
    "\n",
    "def create_features(dataset):\n",
    "    \n",
    "    dataset = dataset.copy(True)\n",
    "    \n",
    "    dataset['feature_types_clean'] = dataset['feature_types'].apply(lambda features: [UNK_FEATURTE if feature not in valid_features else feature for feature in features])\n",
    "    \n",
    "    dataset['number_of_unk_features'] = dataset['feature_types'].apply(lambda features: len([1 for feature in features if feature not in valid_features ]))\n",
    "    \n",
    "    dataset['feature_count'] = dataset['feature_types_clean'].apply(count_feature)\n",
    "    dataset['features_to_duration'] = dataset.apply(lambda r: get_feature_duration(r['feature_types_clean'], r['feature_durations']), axis=1)\n",
    "    dataset['features_to_start_time'] = dataset.apply(lambda r: get_feature_min_start_time(r['feature_types_clean'], r['start_times']), axis=1)\n",
    "    dataset['transition_to_duration'] = dataset['transitions_count']/dataset['duration']\n",
    "    \n",
    "    dataset['duration_to_unique_features'] = dataset['duration']/dataset['number_of_unique_feature_types']\n",
    "    dataset['duration_to_features'] = dataset['duration']/dataset['number_of_feature_types']\n",
    "    \n",
    "    for feature in valid_features:\n",
    "        dataset[f'{feature}_duration'] = dataset['features_to_duration'].apply(lambda features_to_duration: features_to_duration[feature])\n",
    "        dataset[f'{feature}_start_time'] = dataset['features_to_start_time'].apply(lambda features_to_start_time: features_to_start_time[feature])\n",
    "        dataset[f'{feature}_count'] = dataset['feature_count'].apply(lambda feature_count: feature_count[feature])\n",
    "    \n",
    "   \n",
    "    for feature in valid_features:\n",
    "        dataset[[f'{feature}_min', f'{feature}_max', f'{feature}_median']] =  dataset.apply(lambda r: get_feature_min_max_median_duration(r['feature_durations'], r['feature_types_clean'], feature) , axis=1) \n",
    " \n",
    "    dataset['tfidf_scores'] = dataset['feature_types'].apply(tfidf_scores)\n",
    "    #dataset['tfidf_scores'] = dataset.apply(lambda r: tfidf_scores(r['feature_types'], r['feature_durations'], r['duration']), axis=1)\n",
    "    \n",
    "    dataset['tfidf_duration_scores'] = dataset.apply(lambda r: tfidf_duration_scores(r['feature_types'], r['feature_durations'], r['duration']), axis=1)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    for feature in all_unique_features:\n",
    "        dataset['tfidf_duration_{feature}'] = dataset['tfidf_duration_scores'].apply(lambda tfidf_scores: tfidf_scores[feature])\n",
    "        dataset['tfidf_{feature}'] = dataset['tfidf_scores'].apply(lambda tfidf_scores: tfidf_scores[feature])\n",
    "        \n",
    "        \n",
    "    \n",
    "    dataset['post_hour'] = dataset['post_timestamp'].apply(lambda pt: pt.hour)\n",
    "    #dataset['post_year'] = dataset['post_timestamp'].apply(lambda pt: pt.year)\n",
    "    dataset['post_month'] = dataset['post_timestamp'].apply(lambda pt: pt.month)\n",
    "    dataset['post_weekday'] = dataset['post_timestamp'].apply(lambda pt: pt.weekday())\n",
    "    dataset['country'] = country_encoder.transform(dataset['country'])\n",
    "    dataset['language_clean'] = language_clean_encoder.transform(dataset['language_clean'])\n",
    "\n",
    "    create_grams_features(dataset)\n",
    "    \n",
    "    y = dataset['convergance'].apply(get_label).tolist()\n",
    "    \n",
    "    dataset.drop(columns = ['feature_count', 'features_to_duration', 'features_to_start_time',\n",
    "                           'post_timestamp', 'feature_types',\n",
    "                            'start_times', 'feature_durations',\n",
    "                            'audio_embedding', 'visual_embedding',\n",
    "                            'impressions', 'clicks',\n",
    "                           'convergance', 'unique_feature_types',\n",
    "                           'language', 'feature_types_clean', 'tfidf_scores',\n",
    "                           'tfidf_duration_scores'], inplace = True)\n",
    "        \n",
    "    return dataset, y\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "75efc547",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_features = {feature for features in train_df['feature_types'] for feature in features }\n",
    "\n",
    "feature_to_number_of_documents = defaultdict(lambda: 0.0)\n",
    "\n",
    "for feature in all_features:\n",
    "    number_of_rows_with_feature = train_df[train_df['feature_types'].map(lambda features: feature in features) == True].shape[0]\n",
    "    feature_to_number_of_documents[feature] = number_of_rows_with_feature\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "86afcf21",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_features, train_y = create_features(train_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "329d6c11",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_features, test_y = create_features(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5b9d9ca3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.1701317715959005, 0.8730609569587066]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classes_weights = list(class_weight.compute_class_weight(class_weight = 'balanced',\n",
    "                                                         classes = np.unique(train_y),\n",
    "                                                         y = train_y))\n",
    "\n",
    "weights = np.ones(len(train_y), dtype = 'float')\n",
    "for i, val in enumerate(train_y):\n",
    "    weights[i] = classes_weights[val]\n",
    "\n",
    "classes_weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d13fb5b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n",
       "              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.4,\n",
       "              early_stopping_rounds=None, enable_categorical=False,\n",
       "              eval_metric=None, gamma=0.4, gpu_id=-1, grow_policy='depthwise',\n",
       "              importance_type=None, interaction_constraints='',\n",
       "              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,\n",
       "              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,\n",
       "              missing=nan, monotone_constraints='()', n_estimators=10, n_jobs=0,\n",
       "              num_parallel_tree=1, predictor='auto', random_state=0,\n",
       "              reg_alpha=0, reg_lambda=1, ...)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = xgb.XGBClassifier(n_estimators=10, subsample = 0.5, max_depth = 6, colsample_bytree = 0.4,\n",
    "                       gamma = 0.4)\n",
    "\n",
    "clf.fit(train_features, train_y, sample_weight=weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "39015bc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_predict = clf.predict(train_features)\n",
    "test_predict = clf.predict(test_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8ee2c6f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.80966325, 0.19033675],\n",
       "       [0.24710509, 0.75289491]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_confusion_matrix = metrics.confusion_matrix(train_y, train_predict, normalize = 'true')\n",
    "train_confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4b0f939f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.74736842, 0.25263158],\n",
       "       [0.31468531, 0.68531469]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_confusion_matrix = metrics.confusion_matrix(test_y, test_predict, normalize = 'true')\n",
    "test_confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9700ca73",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_scores = clf.predict_proba(train_features)[:, 1]\n",
    "test_scores = clf.predict_proba(test_features)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9944b2a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_precision_recall(scores, labels, th):    \n",
    "    pre = precision_score(labels, scores > th)\n",
    "    rec = recall_score(labels, scores > th)\n",
    "\n",
    "    return (pre, rec, th)\n",
    "\n",
    "def plot_precision_recall(scores, labels):\n",
    "    rows = []\n",
    "    for th in wp_thresholds:\n",
    "        metric_values = calc_precision_recall(scores,  labels, th)\n",
    "        rows.append(metric_values)\n",
    "\n",
    "    metrics_df = pd.DataFrame(rows, columns =['precision', 'recall', 'th'])\n",
    "\n",
    "    fig, ax = plt.subplots()\n",
    "    sns.scatterplot(data=metrics_df, x=\"precision\", y=\"recall\", ax= ax)\n",
    "    plt.show()\n",
    "    return metrics_df.sort_values(by = ['precision'], ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a8c8eb3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>th</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.020979</td>\n",
       "      <td>0.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.991870</td>\n",
       "      <td>0.106643</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.964567</td>\n",
       "      <td>0.214161</td>\n",
       "      <td>0.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.945596</td>\n",
       "      <td>0.319056</td>\n",
       "      <td>0.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.919028</td>\n",
       "      <td>0.396853</td>\n",
       "      <td>0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.900840</td>\n",
       "      <td>0.468531</td>\n",
       "      <td>0.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.856938</td>\n",
       "      <td>0.523601</td>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.830594</td>\n",
       "      <td>0.574301</td>\n",
       "      <td>0.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.806780</td>\n",
       "      <td>0.624126</td>\n",
       "      <td>0.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.784000</td>\n",
       "      <td>0.685315</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.762681</td>\n",
       "      <td>0.736014</td>\n",
       "      <td>0.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.732899</td>\n",
       "      <td>0.786713</td>\n",
       "      <td>0.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.710370</td>\n",
       "      <td>0.838287</td>\n",
       "      <td>0.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.681666</td>\n",
       "      <td>0.887238</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.650367</td>\n",
       "      <td>0.930070</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.623801</td>\n",
       "      <td>0.966783</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.594723</td>\n",
       "      <td>0.985140</td>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.573795</td>\n",
       "      <td>0.999126</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    precision    recall    th\n",
       "17   1.000000  0.020979  0.95\n",
       "16   0.991870  0.106643  0.90\n",
       "15   0.964567  0.214161  0.85\n",
       "14   0.945596  0.319056  0.80\n",
       "13   0.919028  0.396853  0.75\n",
       "12   0.900840  0.468531  0.70\n",
       "11   0.856938  0.523601  0.65\n",
       "10   0.830594  0.574301  0.60\n",
       "9    0.806780  0.624126  0.55\n",
       "8    0.784000  0.685315  0.50\n",
       "7    0.762681  0.736014  0.45\n",
       "6    0.732899  0.786713  0.40\n",
       "5    0.710370  0.838287  0.35\n",
       "4    0.681666  0.887238  0.30\n",
       "3    0.650367  0.930070  0.25\n",
       "2    0.623801  0.966783  0.20\n",
       "1    0.594723  0.985140  0.15\n",
       "0    0.573795  0.999126  0.10\n",
       "18   0.000000  0.000000  0.99"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_precision_recall(test_scores,  test_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "39eddef7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>th</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.023159</td>\n",
       "      <td>0.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.994545</td>\n",
       "      <td>0.119511</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.982944</td>\n",
       "      <td>0.239240</td>\n",
       "      <td>0.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.961516</td>\n",
       "      <td>0.360280</td>\n",
       "      <td>0.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.949634</td>\n",
       "      <td>0.453135</td>\n",
       "      <td>0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.929183</td>\n",
       "      <td>0.521739</td>\n",
       "      <td>0.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.912024</td>\n",
       "      <td>0.586629</td>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.890336</td>\n",
       "      <td>0.642124</td>\n",
       "      <td>0.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.867388</td>\n",
       "      <td>0.700240</td>\n",
       "      <td>0.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.841309</td>\n",
       "      <td>0.752895</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.819296</td>\n",
       "      <td>0.803365</td>\n",
       "      <td>0.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.785051</td>\n",
       "      <td>0.849028</td>\n",
       "      <td>0.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.751949</td>\n",
       "      <td>0.884859</td>\n",
       "      <td>0.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.715060</td>\n",
       "      <td>0.922220</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.678883</td>\n",
       "      <td>0.951060</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.638289</td>\n",
       "      <td>0.974656</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.602310</td>\n",
       "      <td>0.991042</td>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.576395</td>\n",
       "      <td>0.999782</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    precision    recall    th\n",
       "17   1.000000  0.023159  0.95\n",
       "16   0.994545  0.119511  0.90\n",
       "15   0.982944  0.239240  0.85\n",
       "14   0.961516  0.360280  0.80\n",
       "13   0.949634  0.453135  0.75\n",
       "12   0.929183  0.521739  0.70\n",
       "11   0.912024  0.586629  0.65\n",
       "10   0.890336  0.642124  0.60\n",
       "9    0.867388  0.700240  0.55\n",
       "8    0.841309  0.752895  0.50\n",
       "7    0.819296  0.803365  0.45\n",
       "6    0.785051  0.849028  0.40\n",
       "5    0.751949  0.884859  0.35\n",
       "4    0.715060  0.922220  0.30\n",
       "3    0.678883  0.951060  0.25\n",
       "2    0.638289  0.974656  0.20\n",
       "1    0.602310  0.991042  0.15\n",
       "0    0.576395  0.999782  0.10\n",
       "18   0.000000  0.000000  0.99"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_precision_recall(train_scores, train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efe41d62",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (kaggle1)",
   "language": "python",
   "name": "kaggle1"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
